// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mlt.proto
#include "stdafx.h"
#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "mlt.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mlt {

namespace {

const ::google::protobuf::Descriptor* Label_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Label_reflection_ = NULL;
const ::google::protobuf::Descriptor* Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_mlt_2eproto() {
  protobuf_AddDesc_mlt_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "mlt.proto");
  GOOGLE_CHECK(file != NULL);
  Label_descriptor_ = file->message_type(0);
  static const int Label_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, wrlfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, imgfilename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, point_),
  };
  Label_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Label_descriptor_,
      Label::default_instance_,
      Label_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Label, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Label));
  Info_descriptor_ = file->message_type(1);
  static const int Info_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, viewpoint_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, viewpoint_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, viewpoint_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, lookori_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, lookori_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, lookori_z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, rot_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, rot_y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, rot_z_),
  };
  Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Info_descriptor_,
      Info::default_instance_,
      Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Info));
  Point_descriptor_ = file->message_type(2);
  static const int Point_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, xl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, yl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, zl_),
  };
  Point_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Point));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_mlt_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Label_descriptor_, &Label::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Info_descriptor_, &Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Point_descriptor_, &Point::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_mlt_2eproto() {
  delete Label::default_instance_;
  delete Label_reflection_;
  delete Info::default_instance_;
  delete Info_reflection_;
  delete Point::default_instance_;
  delete Point_reflection_;
}

void protobuf_AddDesc_mlt_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tmlt.proto\022\003mlt\"v\n\005Label\022\017\n\007version\030\001 \001"
    "(\t\022\023\n\013wrlFileName\030\002 \001(\t\022\023\n\013imgFileName\030\003"
    " \001(\t\022\027\n\004info\030\004 \001(\0132\t.mlt.Info\022\031\n\005point\030\005"
    " \003(\0132\n.mlt.Point\"\253\001\n\004Info\022\023\n\013viewpoint_x"
    "\030\001 \001(\001\022\023\n\013viewpoint_y\030\002 \001(\001\022\023\n\013viewpoint"
    "_z\030\003 \001(\001\022\021\n\tlookori_x\030\004 \001(\001\022\021\n\tlookori_y"
    "\030\005 \001(\001\022\021\n\tlookori_z\030\006 \001(\001\022\r\n\005rot_x\030\007 \001(\001"
    "\022\r\n\005rot_y\030\010 \001(\001\022\r\n\005rot_z\030\t \001(\001\"M\n\005Point\022"
    "\n\n\002id\030\001 \001(\005\022\t\n\001x\030\002 \001(\005\022\t\n\001y\030\003 \001(\005\022\n\n\002xl\030"
    "\004 \001(\001\022\n\n\002yl\030\005 \001(\001\022\n\n\002zl\030\006 \001(\001", 389);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "mlt.proto", &protobuf_RegisterTypes);
  Label::default_instance_ = new Label();
  Info::default_instance_ = new Info();
  Point::default_instance_ = new Point();
  Label::default_instance_->InitAsDefaultInstance();
  Info::default_instance_->InitAsDefaultInstance();
  Point::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_mlt_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_mlt_2eproto {
  StaticDescriptorInitializer_mlt_2eproto() {
    protobuf_AddDesc_mlt_2eproto();
  }
} static_descriptor_initializer_mlt_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Label::kVersionFieldNumber;
const int Label::kWrlFileNameFieldNumber;
const int Label::kImgFileNameFieldNumber;
const int Label::kInfoFieldNumber;
const int Label::kPointFieldNumber;
#endif  // !_MSC_VER

Label::Label()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mlt.Label)
}

void Label::InitAsDefaultInstance() {
  info_ = const_cast< ::mlt::Info*>(&::mlt::Info::default_instance());
}

Label::Label(const Label& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mlt.Label)
}

void Label::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  wrlfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imgfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Label::~Label() {
  // @@protoc_insertion_point(destructor:mlt.Label)
  SharedDtor();
}

void Label::SharedDtor() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (wrlfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wrlfilename_;
  }
  if (imgfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imgfilename_;
  }
  if (this != default_instance_) {
    delete info_;
  }
}

void Label::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Label::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Label_descriptor_;
}

const Label& Label::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mlt_2eproto();
  return *default_instance_;
}

Label* Label::default_instance_ = NULL;

Label* Label::New() const {
  return new Label;
}

void Label::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    if (has_wrlfilename()) {
      if (wrlfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        wrlfilename_->clear();
      }
    }
    if (has_imgfilename()) {
      if (imgfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imgfilename_->clear();
      }
    }
    if (has_info()) {
      if (info_ != NULL) info_->::mlt::Info::Clear();
    }
  }
  point_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Label::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mlt.Label)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string version = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wrlFileName;
        break;
      }

      // optional string wrlFileName = 2;
      case 2: {
        if (tag == 18) {
         parse_wrlFileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wrlfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->wrlfilename().data(), this->wrlfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "wrlfilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_imgFileName;
        break;
      }

      // optional string imgFileName = 3;
      case 3: {
        if (tag == 26) {
         parse_imgFileName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_imgfilename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->imgfilename().data(), this->imgfilename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "imgfilename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_info;
        break;
      }

      // optional .mlt.Info info = 4;
      case 4: {
        if (tag == 34) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_point;
        break;
      }

      // repeated .mlt.Point point = 5;
      case 5: {
        if (tag == 42) {
         parse_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_point;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mlt.Label)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mlt.Label)
  return false;
#undef DO_
}

void Label::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mlt.Label)
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->version(), output);
  }

  // optional string wrlFileName = 2;
  if (has_wrlfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wrlfilename().data(), this->wrlfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wrlfilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->wrlfilename(), output);
  }

  // optional string imgFileName = 3;
  if (has_imgfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgfilename().data(), this->imgfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imgfilename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->imgfilename(), output);
  }

  // optional .mlt.Info info = 4;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->info(), output);
  }

  // repeated .mlt.Point point = 5;
  for (int i = 0; i < this->point_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->point(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mlt.Label)
}

::google::protobuf::uint8* Label::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mlt.Label)
  // optional string version = 1;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->version(), target);
  }

  // optional string wrlFileName = 2;
  if (has_wrlfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->wrlfilename().data(), this->wrlfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "wrlfilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->wrlfilename(), target);
  }

  // optional string imgFileName = 3;
  if (has_imgfilename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->imgfilename().data(), this->imgfilename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "imgfilename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->imgfilename(), target);
  }

  // optional .mlt.Info info = 4;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->info(), target);
  }

  // repeated .mlt.Point point = 5;
  for (int i = 0; i < this->point_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->point(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mlt.Label)
  return target;
}

int Label::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string wrlFileName = 2;
    if (has_wrlfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wrlfilename());
    }

    // optional string imgFileName = 3;
    if (has_imgfilename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->imgfilename());
    }

    // optional .mlt.Info info = 4;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  // repeated .mlt.Point point = 5;
  total_size += 1 * this->point_size();
  for (int i = 0; i < this->point_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->point(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Label::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Label* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Label*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Label::MergeFrom(const Label& from) {
  GOOGLE_CHECK_NE(&from, this);
  point_.MergeFrom(from.point_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_wrlfilename()) {
      set_wrlfilename(from.wrlfilename());
    }
    if (from.has_imgfilename()) {
      set_imgfilename(from.imgfilename());
    }
    if (from.has_info()) {
      mutable_info()->::mlt::Info::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Label::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Label::CopyFrom(const Label& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Label::IsInitialized() const {

  return true;
}

void Label::Swap(Label* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(wrlfilename_, other->wrlfilename_);
    std::swap(imgfilename_, other->imgfilename_);
    std::swap(info_, other->info_);
    point_.Swap(&other->point_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Label::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Label_descriptor_;
  metadata.reflection = Label_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Info::kViewpointXFieldNumber;
const int Info::kViewpointYFieldNumber;
const int Info::kViewpointZFieldNumber;
const int Info::kLookoriXFieldNumber;
const int Info::kLookoriYFieldNumber;
const int Info::kLookoriZFieldNumber;
const int Info::kRotXFieldNumber;
const int Info::kRotYFieldNumber;
const int Info::kRotZFieldNumber;
#endif  // !_MSC_VER

Info::Info()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mlt.Info)
}

void Info::InitAsDefaultInstance() {
}

Info::Info(const Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mlt.Info)
}

void Info::SharedCtor() {
  _cached_size_ = 0;
  viewpoint_x_ = 0;
  viewpoint_y_ = 0;
  viewpoint_z_ = 0;
  lookori_x_ = 0;
  lookori_y_ = 0;
  lookori_z_ = 0;
  rot_x_ = 0;
  rot_y_ = 0;
  rot_z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Info::~Info() {
  // @@protoc_insertion_point(destructor:mlt.Info)
  SharedDtor();
}

void Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Info_descriptor_;
}

const Info& Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mlt_2eproto();
  return *default_instance_;
}

Info* Info::default_instance_ = NULL;

Info* Info::New() const {
  return new Info;
}

void Info::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Info*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(viewpoint_x_, rot_y_);
  }
  rot_z_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mlt.Info)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double viewpoint_x = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &viewpoint_x_)));
          set_has_viewpoint_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_viewpoint_y;
        break;
      }

      // optional double viewpoint_y = 2;
      case 2: {
        if (tag == 17) {
         parse_viewpoint_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &viewpoint_y_)));
          set_has_viewpoint_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_viewpoint_z;
        break;
      }

      // optional double viewpoint_z = 3;
      case 3: {
        if (tag == 25) {
         parse_viewpoint_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &viewpoint_z_)));
          set_has_viewpoint_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_lookori_x;
        break;
      }

      // optional double lookori_x = 4;
      case 4: {
        if (tag == 33) {
         parse_lookori_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lookori_x_)));
          set_has_lookori_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_lookori_y;
        break;
      }

      // optional double lookori_y = 5;
      case 5: {
        if (tag == 41) {
         parse_lookori_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lookori_y_)));
          set_has_lookori_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_lookori_z;
        break;
      }

      // optional double lookori_z = 6;
      case 6: {
        if (tag == 49) {
         parse_lookori_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lookori_z_)));
          set_has_lookori_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_rot_x;
        break;
      }

      // optional double rot_x = 7;
      case 7: {
        if (tag == 57) {
         parse_rot_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rot_x_)));
          set_has_rot_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_rot_y;
        break;
      }

      // optional double rot_y = 8;
      case 8: {
        if (tag == 65) {
         parse_rot_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rot_y_)));
          set_has_rot_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_rot_z;
        break;
      }

      // optional double rot_z = 9;
      case 9: {
        if (tag == 73) {
         parse_rot_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rot_z_)));
          set_has_rot_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mlt.Info)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mlt.Info)
  return false;
#undef DO_
}

void Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mlt.Info)
  // optional double viewpoint_x = 1;
  if (has_viewpoint_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->viewpoint_x(), output);
  }

  // optional double viewpoint_y = 2;
  if (has_viewpoint_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->viewpoint_y(), output);
  }

  // optional double viewpoint_z = 3;
  if (has_viewpoint_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->viewpoint_z(), output);
  }

  // optional double lookori_x = 4;
  if (has_lookori_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->lookori_x(), output);
  }

  // optional double lookori_y = 5;
  if (has_lookori_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lookori_y(), output);
  }

  // optional double lookori_z = 6;
  if (has_lookori_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->lookori_z(), output);
  }

  // optional double rot_x = 7;
  if (has_rot_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->rot_x(), output);
  }

  // optional double rot_y = 8;
  if (has_rot_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->rot_y(), output);
  }

  // optional double rot_z = 9;
  if (has_rot_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->rot_z(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mlt.Info)
}

::google::protobuf::uint8* Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mlt.Info)
  // optional double viewpoint_x = 1;
  if (has_viewpoint_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->viewpoint_x(), target);
  }

  // optional double viewpoint_y = 2;
  if (has_viewpoint_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->viewpoint_y(), target);
  }

  // optional double viewpoint_z = 3;
  if (has_viewpoint_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->viewpoint_z(), target);
  }

  // optional double lookori_x = 4;
  if (has_lookori_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->lookori_x(), target);
  }

  // optional double lookori_y = 5;
  if (has_lookori_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lookori_y(), target);
  }

  // optional double lookori_z = 6;
  if (has_lookori_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->lookori_z(), target);
  }

  // optional double rot_x = 7;
  if (has_rot_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->rot_x(), target);
  }

  // optional double rot_y = 8;
  if (has_rot_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->rot_y(), target);
  }

  // optional double rot_z = 9;
  if (has_rot_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->rot_z(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mlt.Info)
  return target;
}

int Info::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double viewpoint_x = 1;
    if (has_viewpoint_x()) {
      total_size += 1 + 8;
    }

    // optional double viewpoint_y = 2;
    if (has_viewpoint_y()) {
      total_size += 1 + 8;
    }

    // optional double viewpoint_z = 3;
    if (has_viewpoint_z()) {
      total_size += 1 + 8;
    }

    // optional double lookori_x = 4;
    if (has_lookori_x()) {
      total_size += 1 + 8;
    }

    // optional double lookori_y = 5;
    if (has_lookori_y()) {
      total_size += 1 + 8;
    }

    // optional double lookori_z = 6;
    if (has_lookori_z()) {
      total_size += 1 + 8;
    }

    // optional double rot_x = 7;
    if (has_rot_x()) {
      total_size += 1 + 8;
    }

    // optional double rot_y = 8;
    if (has_rot_y()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional double rot_z = 9;
    if (has_rot_z()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Info::MergeFrom(const Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viewpoint_x()) {
      set_viewpoint_x(from.viewpoint_x());
    }
    if (from.has_viewpoint_y()) {
      set_viewpoint_y(from.viewpoint_y());
    }
    if (from.has_viewpoint_z()) {
      set_viewpoint_z(from.viewpoint_z());
    }
    if (from.has_lookori_x()) {
      set_lookori_x(from.lookori_x());
    }
    if (from.has_lookori_y()) {
      set_lookori_y(from.lookori_y());
    }
    if (from.has_lookori_z()) {
      set_lookori_z(from.lookori_z());
    }
    if (from.has_rot_x()) {
      set_rot_x(from.rot_x());
    }
    if (from.has_rot_y()) {
      set_rot_y(from.rot_y());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rot_z()) {
      set_rot_z(from.rot_z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Info::CopyFrom(const Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Info::IsInitialized() const {

  return true;
}

void Info::Swap(Info* other) {
  if (other != this) {
    std::swap(viewpoint_x_, other->viewpoint_x_);
    std::swap(viewpoint_y_, other->viewpoint_y_);
    std::swap(viewpoint_z_, other->viewpoint_z_);
    std::swap(lookori_x_, other->lookori_x_);
    std::swap(lookori_y_, other->lookori_y_);
    std::swap(lookori_z_, other->lookori_z_);
    std::swap(rot_x_, other->rot_x_);
    std::swap(rot_y_, other->rot_y_);
    std::swap(rot_z_, other->rot_z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Info_descriptor_;
  metadata.reflection = Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Point::kIdFieldNumber;
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kXlFieldNumber;
const int Point::kYlFieldNumber;
const int Point::kZlFieldNumber;
#endif  // !_MSC_VER

Point::Point()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mlt.Point)
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:mlt.Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  x_ = 0;
  y_ = 0;
  xl_ = 0;
  yl_ = 0;
  zl_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:mlt.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_mlt_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New() const {
  return new Point;
}

void Point::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Point*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(id_, y_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:mlt.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_x;
        break;
      }

      // optional int32 x = 2;
      case 2: {
        if (tag == 16) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_y;
        break;
      }

      // optional int32 y = 3;
      case 3: {
        if (tag == 24) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_xl;
        break;
      }

      // optional double xl = 4;
      case 4: {
        if (tag == 33) {
         parse_xl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xl_)));
          set_has_xl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_yl;
        break;
      }

      // optional double yl = 5;
      case 5: {
        if (tag == 41) {
         parse_yl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yl_)));
          set_has_yl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_zl;
        break;
      }

      // optional double zl = 6;
      case 6: {
        if (tag == 49) {
         parse_zl:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zl_)));
          set_has_zl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mlt.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mlt.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:mlt.Point)
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 x = 2;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // optional int32 y = 3;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // optional double xl = 4;
  if (has_xl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->xl(), output);
  }

  // optional double yl = 5;
  if (has_yl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->yl(), output);
  }

  // optional double zl = 6;
  if (has_zl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->zl(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:mlt.Point)
}

::google::protobuf::uint8* Point::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:mlt.Point)
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 x = 2;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x(), target);
  }

  // optional int32 y = 3;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y(), target);
  }

  // optional double xl = 4;
  if (has_xl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->xl(), target);
  }

  // optional double yl = 5;
  if (has_yl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->yl(), target);
  }

  // optional double zl = 6;
  if (has_zl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->zl(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mlt.Point)
  return target;
}

int Point::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 x = 2;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->x());
    }

    // optional int32 y = 3;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->y());
    }

    // optional double xl = 4;
    if (has_xl()) {
      total_size += 1 + 8;
    }

    // optional double yl = 5;
    if (has_yl()) {
      total_size += 1 + 8;
    }

    // optional double zl = 6;
    if (has_zl()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Point* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Point*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_xl()) {
      set_xl(from.xl());
    }
    if (from.has_yl()) {
      set_yl(from.yl());
    }
    if (from.has_zl()) {
      set_zl(from.zl());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {

  return true;
}

void Point::Swap(Point* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(xl_, other->xl_);
    std::swap(yl_, other->yl_);
    std::swap(zl_, other->zl_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mlt

// @@protoc_insertion_point(global_scope)
