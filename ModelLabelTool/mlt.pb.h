// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mlt.proto

#ifndef PROTOBUF_mlt_2eproto__INCLUDED
#define PROTOBUF_mlt_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mlt {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_mlt_2eproto();
void protobuf_AssignDesc_mlt_2eproto();
void protobuf_ShutdownFile_mlt_2eproto();

class Label;
class Info;
class Point;

// ===================================================================

class Label : public ::google::protobuf::Message {
 public:
  Label();
  virtual ~Label();

  Label(const Label& from);

  inline Label& operator=(const Label& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Label& default_instance();

  void Swap(Label* other);

  // implements Message ----------------------------------------------

  Label* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Label& from);
  void MergeFrom(const Label& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string version = 1;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 1;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional string wrlFileName = 2;
  inline bool has_wrlfilename() const;
  inline void clear_wrlfilename();
  static const int kWrlFileNameFieldNumber = 2;
  inline const ::std::string& wrlfilename() const;
  inline void set_wrlfilename(const ::std::string& value);
  inline void set_wrlfilename(const char* value);
  inline void set_wrlfilename(const char* value, size_t size);
  inline ::std::string* mutable_wrlfilename();
  inline ::std::string* release_wrlfilename();
  inline void set_allocated_wrlfilename(::std::string* wrlfilename);

  // optional string imgFileName = 3;
  inline bool has_imgfilename() const;
  inline void clear_imgfilename();
  static const int kImgFileNameFieldNumber = 3;
  inline const ::std::string& imgfilename() const;
  inline void set_imgfilename(const ::std::string& value);
  inline void set_imgfilename(const char* value);
  inline void set_imgfilename(const char* value, size_t size);
  inline ::std::string* mutable_imgfilename();
  inline ::std::string* release_imgfilename();
  inline void set_allocated_imgfilename(::std::string* imgfilename);

  // optional .mlt.Info info = 4;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 4;
  inline const ::mlt::Info& info() const;
  inline ::mlt::Info* mutable_info();
  inline ::mlt::Info* release_info();
  inline void set_allocated_info(::mlt::Info* info);

  // repeated .mlt.Point point = 5;
  inline int point_size() const;
  inline void clear_point();
  static const int kPointFieldNumber = 5;
  inline const ::mlt::Point& point(int index) const;
  inline ::mlt::Point* mutable_point(int index);
  inline ::mlt::Point* add_point();
  inline const ::google::protobuf::RepeatedPtrField< ::mlt::Point >&
      point() const;
  inline ::google::protobuf::RepeatedPtrField< ::mlt::Point >*
      mutable_point();

  // @@protoc_insertion_point(class_scope:mlt.Label)
 private:
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_wrlfilename();
  inline void clear_has_wrlfilename();
  inline void set_has_imgfilename();
  inline void clear_has_imgfilename();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* version_;
  ::std::string* wrlfilename_;
  ::std::string* imgfilename_;
  ::mlt::Info* info_;
  ::google::protobuf::RepeatedPtrField< ::mlt::Point > point_;
  friend void  protobuf_AddDesc_mlt_2eproto();
  friend void protobuf_AssignDesc_mlt_2eproto();
  friend void protobuf_ShutdownFile_mlt_2eproto();

  void InitAsDefaultInstance();
  static Label* default_instance_;
};
// -------------------------------------------------------------------

class Info : public ::google::protobuf::Message {
 public:
  Info();
  virtual ~Info();

  Info(const Info& from);

  inline Info& operator=(const Info& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Info& default_instance();

  void Swap(Info* other);

  // implements Message ----------------------------------------------

  Info* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Info& from);
  void MergeFrom(const Info& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double viewpoint_x = 1;
  inline bool has_viewpoint_x() const;
  inline void clear_viewpoint_x();
  static const int kViewpointXFieldNumber = 1;
  inline double viewpoint_x() const;
  inline void set_viewpoint_x(double value);

  // optional double viewpoint_y = 2;
  inline bool has_viewpoint_y() const;
  inline void clear_viewpoint_y();
  static const int kViewpointYFieldNumber = 2;
  inline double viewpoint_y() const;
  inline void set_viewpoint_y(double value);

  // optional double viewpoint_z = 3;
  inline bool has_viewpoint_z() const;
  inline void clear_viewpoint_z();
  static const int kViewpointZFieldNumber = 3;
  inline double viewpoint_z() const;
  inline void set_viewpoint_z(double value);

  // optional double lookori_x = 4;
  inline bool has_lookori_x() const;
  inline void clear_lookori_x();
  static const int kLookoriXFieldNumber = 4;
  inline double lookori_x() const;
  inline void set_lookori_x(double value);

  // optional double lookori_y = 5;
  inline bool has_lookori_y() const;
  inline void clear_lookori_y();
  static const int kLookoriYFieldNumber = 5;
  inline double lookori_y() const;
  inline void set_lookori_y(double value);

  // optional double lookori_z = 6;
  inline bool has_lookori_z() const;
  inline void clear_lookori_z();
  static const int kLookoriZFieldNumber = 6;
  inline double lookori_z() const;
  inline void set_lookori_z(double value);

  // optional double rot_x = 7;
  inline bool has_rot_x() const;
  inline void clear_rot_x();
  static const int kRotXFieldNumber = 7;
  inline double rot_x() const;
  inline void set_rot_x(double value);

  // optional double rot_y = 8;
  inline bool has_rot_y() const;
  inline void clear_rot_y();
  static const int kRotYFieldNumber = 8;
  inline double rot_y() const;
  inline void set_rot_y(double value);

  // optional double rot_z = 9;
  inline bool has_rot_z() const;
  inline void clear_rot_z();
  static const int kRotZFieldNumber = 9;
  inline double rot_z() const;
  inline void set_rot_z(double value);

  // @@protoc_insertion_point(class_scope:mlt.Info)
 private:
  inline void set_has_viewpoint_x();
  inline void clear_has_viewpoint_x();
  inline void set_has_viewpoint_y();
  inline void clear_has_viewpoint_y();
  inline void set_has_viewpoint_z();
  inline void clear_has_viewpoint_z();
  inline void set_has_lookori_x();
  inline void clear_has_lookori_x();
  inline void set_has_lookori_y();
  inline void clear_has_lookori_y();
  inline void set_has_lookori_z();
  inline void clear_has_lookori_z();
  inline void set_has_rot_x();
  inline void clear_has_rot_x();
  inline void set_has_rot_y();
  inline void clear_has_rot_y();
  inline void set_has_rot_z();
  inline void clear_has_rot_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double viewpoint_x_;
  double viewpoint_y_;
  double viewpoint_z_;
  double lookori_x_;
  double lookori_y_;
  double lookori_z_;
  double rot_x_;
  double rot_y_;
  double rot_z_;
  friend void  protobuf_AddDesc_mlt_2eproto();
  friend void protobuf_AssignDesc_mlt_2eproto();
  friend void protobuf_ShutdownFile_mlt_2eproto();

  void InitAsDefaultInstance();
  static Info* default_instance_;
};
// -------------------------------------------------------------------

class Point : public ::google::protobuf::Message {
 public:
  Point();
  virtual ~Point();

  Point(const Point& from);

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Point& default_instance();

  void Swap(Point* other);

  // implements Message ----------------------------------------------

  Point* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::int32 x() const;
  inline void set_x(::google::protobuf::int32 value);

  // optional int32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::int32 y() const;
  inline void set_y(::google::protobuf::int32 value);

  // optional double xl = 4;
  inline bool has_xl() const;
  inline void clear_xl();
  static const int kXlFieldNumber = 4;
  inline double xl() const;
  inline void set_xl(double value);

  // optional double yl = 5;
  inline bool has_yl() const;
  inline void clear_yl();
  static const int kYlFieldNumber = 5;
  inline double yl() const;
  inline void set_yl(double value);

  // optional double zl = 6;
  inline bool has_zl() const;
  inline void clear_zl();
  static const int kZlFieldNumber = 6;
  inline double zl() const;
  inline void set_zl(double value);

  // @@protoc_insertion_point(class_scope:mlt.Point)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_xl();
  inline void clear_has_xl();
  inline void set_has_yl();
  inline void clear_has_yl();
  inline void set_has_zl();
  inline void clear_has_zl();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 x_;
  double xl_;
  double yl_;
  double zl_;
  ::google::protobuf::int32 y_;
  friend void  protobuf_AddDesc_mlt_2eproto();
  friend void protobuf_AssignDesc_mlt_2eproto();
  friend void protobuf_ShutdownFile_mlt_2eproto();

  void InitAsDefaultInstance();
  static Point* default_instance_;
};
// ===================================================================


// ===================================================================

// Label

// optional string version = 1;
inline bool Label::has_version() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Label::set_has_version() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Label::clear_has_version() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Label::clear_version() {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& Label::version() const {
  // @@protoc_insertion_point(field_get:mlt.Label.version)
  return *version_;
}
inline void Label::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:mlt.Label.version)
}
inline void Label::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:mlt.Label.version)
}
inline void Label::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mlt.Label.version)
}
inline ::std::string* Label::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mlt.Label.version)
  return version_;
}
inline ::std::string* Label::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Label::set_allocated_version(::std::string* version) {
  if (version_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mlt.Label.version)
}

// optional string wrlFileName = 2;
inline bool Label::has_wrlfilename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Label::set_has_wrlfilename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Label::clear_has_wrlfilename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Label::clear_wrlfilename() {
  if (wrlfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wrlfilename_->clear();
  }
  clear_has_wrlfilename();
}
inline const ::std::string& Label::wrlfilename() const {
  // @@protoc_insertion_point(field_get:mlt.Label.wrlFileName)
  return *wrlfilename_;
}
inline void Label::set_wrlfilename(const ::std::string& value) {
  set_has_wrlfilename();
  if (wrlfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wrlfilename_ = new ::std::string;
  }
  wrlfilename_->assign(value);
  // @@protoc_insertion_point(field_set:mlt.Label.wrlFileName)
}
inline void Label::set_wrlfilename(const char* value) {
  set_has_wrlfilename();
  if (wrlfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wrlfilename_ = new ::std::string;
  }
  wrlfilename_->assign(value);
  // @@protoc_insertion_point(field_set_char:mlt.Label.wrlFileName)
}
inline void Label::set_wrlfilename(const char* value, size_t size) {
  set_has_wrlfilename();
  if (wrlfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wrlfilename_ = new ::std::string;
  }
  wrlfilename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mlt.Label.wrlFileName)
}
inline ::std::string* Label::mutable_wrlfilename() {
  set_has_wrlfilename();
  if (wrlfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    wrlfilename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mlt.Label.wrlFileName)
  return wrlfilename_;
}
inline ::std::string* Label::release_wrlfilename() {
  clear_has_wrlfilename();
  if (wrlfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = wrlfilename_;
    wrlfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Label::set_allocated_wrlfilename(::std::string* wrlfilename) {
  if (wrlfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete wrlfilename_;
  }
  if (wrlfilename) {
    set_has_wrlfilename();
    wrlfilename_ = wrlfilename;
  } else {
    clear_has_wrlfilename();
    wrlfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mlt.Label.wrlFileName)
}

// optional string imgFileName = 3;
inline bool Label::has_imgfilename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Label::set_has_imgfilename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Label::clear_has_imgfilename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Label::clear_imgfilename() {
  if (imgfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imgfilename_->clear();
  }
  clear_has_imgfilename();
}
inline const ::std::string& Label::imgfilename() const {
  // @@protoc_insertion_point(field_get:mlt.Label.imgFileName)
  return *imgfilename_;
}
inline void Label::set_imgfilename(const ::std::string& value) {
  set_has_imgfilename();
  if (imgfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imgfilename_ = new ::std::string;
  }
  imgfilename_->assign(value);
  // @@protoc_insertion_point(field_set:mlt.Label.imgFileName)
}
inline void Label::set_imgfilename(const char* value) {
  set_has_imgfilename();
  if (imgfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imgfilename_ = new ::std::string;
  }
  imgfilename_->assign(value);
  // @@protoc_insertion_point(field_set_char:mlt.Label.imgFileName)
}
inline void Label::set_imgfilename(const char* value, size_t size) {
  set_has_imgfilename();
  if (imgfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imgfilename_ = new ::std::string;
  }
  imgfilename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:mlt.Label.imgFileName)
}
inline ::std::string* Label::mutable_imgfilename() {
  set_has_imgfilename();
  if (imgfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imgfilename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:mlt.Label.imgFileName)
  return imgfilename_;
}
inline ::std::string* Label::release_imgfilename() {
  clear_has_imgfilename();
  if (imgfilename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = imgfilename_;
    imgfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Label::set_allocated_imgfilename(::std::string* imgfilename) {
  if (imgfilename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imgfilename_;
  }
  if (imgfilename) {
    set_has_imgfilename();
    imgfilename_ = imgfilename;
  } else {
    clear_has_imgfilename();
    imgfilename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:mlt.Label.imgFileName)
}

// optional .mlt.Info info = 4;
inline bool Label::has_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Label::set_has_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Label::clear_has_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Label::clear_info() {
  if (info_ != NULL) info_->::mlt::Info::Clear();
  clear_has_info();
}
inline const ::mlt::Info& Label::info() const {
  // @@protoc_insertion_point(field_get:mlt.Label.info)
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::mlt::Info* Label::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::mlt::Info;
  // @@protoc_insertion_point(field_mutable:mlt.Label.info)
  return info_;
}
inline ::mlt::Info* Label::release_info() {
  clear_has_info();
  ::mlt::Info* temp = info_;
  info_ = NULL;
  return temp;
}
inline void Label::set_allocated_info(::mlt::Info* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
  // @@protoc_insertion_point(field_set_allocated:mlt.Label.info)
}

// repeated .mlt.Point point = 5;
inline int Label::point_size() const {
  return point_.size();
}
inline void Label::clear_point() {
  point_.Clear();
}
inline const ::mlt::Point& Label::point(int index) const {
  // @@protoc_insertion_point(field_get:mlt.Label.point)
  return point_.Get(index);
}
inline ::mlt::Point* Label::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:mlt.Label.point)
  return point_.Mutable(index);
}
inline ::mlt::Point* Label::add_point() {
  // @@protoc_insertion_point(field_add:mlt.Label.point)
  return point_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::mlt::Point >&
Label::point() const {
  // @@protoc_insertion_point(field_list:mlt.Label.point)
  return point_;
}
inline ::google::protobuf::RepeatedPtrField< ::mlt::Point >*
Label::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:mlt.Label.point)
  return &point_;
}

// -------------------------------------------------------------------

// Info

// optional double viewpoint_x = 1;
inline bool Info::has_viewpoint_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Info::set_has_viewpoint_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Info::clear_has_viewpoint_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Info::clear_viewpoint_x() {
  viewpoint_x_ = 0;
  clear_has_viewpoint_x();
}
inline double Info::viewpoint_x() const {
  // @@protoc_insertion_point(field_get:mlt.Info.viewpoint_x)
  return viewpoint_x_;
}
inline void Info::set_viewpoint_x(double value) {
  set_has_viewpoint_x();
  viewpoint_x_ = value;
  // @@protoc_insertion_point(field_set:mlt.Info.viewpoint_x)
}

// optional double viewpoint_y = 2;
inline bool Info::has_viewpoint_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Info::set_has_viewpoint_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Info::clear_has_viewpoint_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Info::clear_viewpoint_y() {
  viewpoint_y_ = 0;
  clear_has_viewpoint_y();
}
inline double Info::viewpoint_y() const {
  // @@protoc_insertion_point(field_get:mlt.Info.viewpoint_y)
  return viewpoint_y_;
}
inline void Info::set_viewpoint_y(double value) {
  set_has_viewpoint_y();
  viewpoint_y_ = value;
  // @@protoc_insertion_point(field_set:mlt.Info.viewpoint_y)
}

// optional double viewpoint_z = 3;
inline bool Info::has_viewpoint_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Info::set_has_viewpoint_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Info::clear_has_viewpoint_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Info::clear_viewpoint_z() {
  viewpoint_z_ = 0;
  clear_has_viewpoint_z();
}
inline double Info::viewpoint_z() const {
  // @@protoc_insertion_point(field_get:mlt.Info.viewpoint_z)
  return viewpoint_z_;
}
inline void Info::set_viewpoint_z(double value) {
  set_has_viewpoint_z();
  viewpoint_z_ = value;
  // @@protoc_insertion_point(field_set:mlt.Info.viewpoint_z)
}

// optional double lookori_x = 4;
inline bool Info::has_lookori_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Info::set_has_lookori_x() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Info::clear_has_lookori_x() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Info::clear_lookori_x() {
  lookori_x_ = 0;
  clear_has_lookori_x();
}
inline double Info::lookori_x() const {
  // @@protoc_insertion_point(field_get:mlt.Info.lookori_x)
  return lookori_x_;
}
inline void Info::set_lookori_x(double value) {
  set_has_lookori_x();
  lookori_x_ = value;
  // @@protoc_insertion_point(field_set:mlt.Info.lookori_x)
}

// optional double lookori_y = 5;
inline bool Info::has_lookori_y() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Info::set_has_lookori_y() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Info::clear_has_lookori_y() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Info::clear_lookori_y() {
  lookori_y_ = 0;
  clear_has_lookori_y();
}
inline double Info::lookori_y() const {
  // @@protoc_insertion_point(field_get:mlt.Info.lookori_y)
  return lookori_y_;
}
inline void Info::set_lookori_y(double value) {
  set_has_lookori_y();
  lookori_y_ = value;
  // @@protoc_insertion_point(field_set:mlt.Info.lookori_y)
}

// optional double lookori_z = 6;
inline bool Info::has_lookori_z() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Info::set_has_lookori_z() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Info::clear_has_lookori_z() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Info::clear_lookori_z() {
  lookori_z_ = 0;
  clear_has_lookori_z();
}
inline double Info::lookori_z() const {
  // @@protoc_insertion_point(field_get:mlt.Info.lookori_z)
  return lookori_z_;
}
inline void Info::set_lookori_z(double value) {
  set_has_lookori_z();
  lookori_z_ = value;
  // @@protoc_insertion_point(field_set:mlt.Info.lookori_z)
}

// optional double rot_x = 7;
inline bool Info::has_rot_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Info::set_has_rot_x() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Info::clear_has_rot_x() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Info::clear_rot_x() {
  rot_x_ = 0;
  clear_has_rot_x();
}
inline double Info::rot_x() const {
  // @@protoc_insertion_point(field_get:mlt.Info.rot_x)
  return rot_x_;
}
inline void Info::set_rot_x(double value) {
  set_has_rot_x();
  rot_x_ = value;
  // @@protoc_insertion_point(field_set:mlt.Info.rot_x)
}

// optional double rot_y = 8;
inline bool Info::has_rot_y() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Info::set_has_rot_y() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Info::clear_has_rot_y() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Info::clear_rot_y() {
  rot_y_ = 0;
  clear_has_rot_y();
}
inline double Info::rot_y() const {
  // @@protoc_insertion_point(field_get:mlt.Info.rot_y)
  return rot_y_;
}
inline void Info::set_rot_y(double value) {
  set_has_rot_y();
  rot_y_ = value;
  // @@protoc_insertion_point(field_set:mlt.Info.rot_y)
}

// optional double rot_z = 9;
inline bool Info::has_rot_z() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Info::set_has_rot_z() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Info::clear_has_rot_z() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Info::clear_rot_z() {
  rot_z_ = 0;
  clear_has_rot_z();
}
inline double Info::rot_z() const {
  // @@protoc_insertion_point(field_get:mlt.Info.rot_z)
  return rot_z_;
}
inline void Info::set_rot_z(double value) {
  set_has_rot_z();
  rot_z_ = value;
  // @@protoc_insertion_point(field_set:mlt.Info.rot_z)
}

// -------------------------------------------------------------------

// Point

// optional int32 id = 1;
inline bool Point::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Point::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Point::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Point::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 Point::id() const {
  // @@protoc_insertion_point(field_get:mlt.Point.id)
  return id_;
}
inline void Point::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:mlt.Point.id)
}

// optional int32 x = 2;
inline bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Point::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline ::google::protobuf::int32 Point::x() const {
  // @@protoc_insertion_point(field_get:mlt.Point.x)
  return x_;
}
inline void Point::set_x(::google::protobuf::int32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:mlt.Point.x)
}

// optional int32 y = 3;
inline bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Point::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline ::google::protobuf::int32 Point::y() const {
  // @@protoc_insertion_point(field_get:mlt.Point.y)
  return y_;
}
inline void Point::set_y(::google::protobuf::int32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:mlt.Point.y)
}

// optional double xl = 4;
inline bool Point::has_xl() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Point::set_has_xl() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Point::clear_has_xl() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Point::clear_xl() {
  xl_ = 0;
  clear_has_xl();
}
inline double Point::xl() const {
  // @@protoc_insertion_point(field_get:mlt.Point.xl)
  return xl_;
}
inline void Point::set_xl(double value) {
  set_has_xl();
  xl_ = value;
  // @@protoc_insertion_point(field_set:mlt.Point.xl)
}

// optional double yl = 5;
inline bool Point::has_yl() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Point::set_has_yl() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Point::clear_has_yl() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Point::clear_yl() {
  yl_ = 0;
  clear_has_yl();
}
inline double Point::yl() const {
  // @@protoc_insertion_point(field_get:mlt.Point.yl)
  return yl_;
}
inline void Point::set_yl(double value) {
  set_has_yl();
  yl_ = value;
  // @@protoc_insertion_point(field_set:mlt.Point.yl)
}

// optional double zl = 6;
inline bool Point::has_zl() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Point::set_has_zl() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Point::clear_has_zl() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Point::clear_zl() {
  zl_ = 0;
  clear_has_zl();
}
inline double Point::zl() const {
  // @@protoc_insertion_point(field_get:mlt.Point.zl)
  return zl_;
}
inline void Point::set_zl(double value) {
  set_has_zl();
  zl_ = value;
  // @@protoc_insertion_point(field_set:mlt.Point.zl)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace mlt

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_mlt_2eproto__INCLUDED
